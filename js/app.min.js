/**
 * @typedef {Object} dNode
 * @property {HTMLElement} parent
 * @property {HTMLElement} element
 * @property {HTMLElement} to
 * @property {string} breakpoint
 * @property {string} order
 * @property {number} index
 */

/**
 * @typedef {Object} dMediaQuery
 * @property {string} query
 * @property {number} breakpoint
 */

/**
 * @param {'min' | 'max'} type
 */
function useDynamicAdapt(type = "max") {
  const className = "_dynamic_adapt_";
  const attrName = "data-da";

  /** @type {dNode[]} */
  const dNodes = getDNodes();

  /** @type {dMediaQuery[]} */
  const dMediaQueries = getDMediaQueries(dNodes);

  dMediaQueries.forEach((dMediaQuery) => {
    const matchMedia = window.matchMedia(dMediaQuery.query);
    // массив объектов с подходящим брейкпоинтом
    const filteredDNodes = dNodes.filter(
      ({ breakpoint }) => breakpoint === dMediaQuery.breakpoint
    );
    const mediaHandler = getMediaHandler(matchMedia, filteredDNodes);
    matchMedia.addEventListener("change", mediaHandler);

    mediaHandler();
  });

  function getDNodes() {
    const result = [];
    const elements = [...document.querySelectorAll(`[${attrName}]`)];

    elements.forEach((element) => {
      const attr = element.getAttribute(attrName);
      const [toSelector, breakpoint, order] = attr
        .split(",")
        .map((val) => val.trim());

      const to = document.querySelector(toSelector);

      if (to) {
        result.push({
          parent: element.parentElement,
          element,
          to,
          breakpoint: breakpoint ?? "767",
          order:
            order !== undefined
              ? isNumber(order)
                ? Number(order)
                : order
              : "last",
          index: -1,
        });
      }
    });

    return sortDNodes(result);
  }

  /**
   * @param {dNode} items
   * @returns {dMediaQuery[]}
   */
  function getDMediaQueries(items) {
    const uniqItems = [
      ...new Set(
        items.map(
          ({ breakpoint }) => `(${type}-width: ${breakpoint}px),${breakpoint}`
        )
      ),
    ];

    return uniqItems.map((item) => {
      const [query, breakpoint] = item.split(",");

      return { query, breakpoint };
    });
  }

  /**
   * @param {MediaQueryList} matchMedia
   * @param {dNodes} items
   */
  function getMediaHandler(matchMedia, items) {
    return function mediaHandler() {
      if (matchMedia.matches) {
        items.forEach((item) => {
          moveTo(item);
        });

        items.reverse();
      } else {
        items.forEach((item) => {
          if (item.element.classList.contains(className)) {
            moveBack(item);
          }
        });

        items.reverse();
      }
    };
  }

  /**
   * @param {dNode} dNode
   */
  function moveTo(dNode) {
    const { to, element, order } = dNode;
    dNode.index = getIndexInParent(dNode.element, dNode.element.parentElement);
    element.classList.add(className);

    if (order === "last" || order >= to.children.length) {
      to.append(element);

      return;
    }

    if (order === "first") {
      to.prepend(element);

      return;
    }

    to.children[order].before(element);
  }

  /**
   * @param {dNode} dNode
   */
  function moveBack(dNode) {
    const { parent, element, index } = dNode;
    element.classList.remove(className);

    if (index >= 0 && parent.children[index]) {
      parent.children[index].before(element);
    } else {
      parent.append(element);
    }
  }

  /**
   * @param {HTMLElement} element
   * @param {HTMLElement} parent
   */
  function getIndexInParent(element, parent) {
    return [...parent.children].indexOf(element);
  }

  /**
   * Функция сортировки массива по breakpoint и order
   * по возрастанию для type = min
   * по убыванию для type = max
   *
   * @param {dNode[]} items
   */
  function sortDNodes(items) {
    const isMin = type === "min" ? 1 : 0;

    return [...items].sort((a, b) => {
      if (a.breakpoint === b.breakpoint) {
        if (a.order === b.order) {
          return 0;
        }

        if (a.order === "first" || b.order === "last") {
          return -1 * isMin;
        }

        if (a.order === "last" || b.order === "first") {
          return 1 * isMin;
        }

        return 0;
      }

      return (a.breakpoint - b.breakpoint) * isMin;
    });
  }

  function isNumber(value) {
    return !isNaN(value);
  }
}

// Init dynamic adapt
useDynamicAdapt();

// Popup
const popupLinks = document.querySelectorAll(".popup-link");
const body = document.querySelector("body");
const lockPadding = document.querySelectorAll(".lock-padding");
let unlock = true;
const timeout = 400;

if (popupLinks.length > 0) {
  for (let index = 0; index < popupLinks.length; index++) {
    const popupLink = popupLinks[index];
    popupLink.addEventListener("click", function (e) {
      const popupName = popupLink.getAttribute("href").replace("#", "");
      const currentPopup = document.getElementById(popupName);
      popupOpen(currentPopup);
      e.preventDefault();
    });
  }
}

const popupCloseIcon = document.querySelectorAll(".close-popup");
if (popupCloseIcon.length > 0) {
  for (let index = 0; index < popupCloseIcon.length; index++) {
    const el = popupCloseIcon[index];
    el.addEventListener("click", function (e) {
      popupClose(el.closest(".popup"));
      e.preventDefault();
    });
  }
}

function popupOpen(currentPopup) {
  if (currentPopup && unlock) {
    const popupActive = document.querySelector(".popup.open");
    if (popupActive) {
      popupClose(popupActive, false);
    } else {
      bodyLock();
    }
    currentPopup.classList.add("open");
    currentPopup.addEventListener("click", function (e) {
      if (!e.target.closest(".popup__content")) {
        popupClose(e.target.closest(".popup"));
      }
    });
  }
}

function popupClose(popupActive, doUnlock = true) {
  if (unlock) {
    popupActive.classList.remove("open");
    if (doUnlock) {
      bodyUnlock();
    }
  }
}

function bodyLock() {
  const lockPaddingValue =
    window.innerWidth - document.querySelector(".wrapper").offsetWidth + "px";

  if (lockPadding.length > 0) {
    for (let index = 0; index < lockPadding.length; index++) {
      const el = lockPadding[index];
      el.style.paddingRight = lockPaddingValue;
    }
  }
  body.style.paddingRight = lockPaddingValue;
  body.classList.add("lock");

  unlock = false;
  setTimeout(function () {
    unlock = true;
  }, timeout);
}

function bodyUnlock() {
  setTimeout(function () {
    if (lockPadding.length > 0) {
      for (let index = 0; index < lockPadding.length; index++) {
        const el = lockPadding[index];
        el.style.paddingRight = "0px";
      }
    }
    body.style.paddingRight = "0px";
    body.classList.remove("lock");
  }, timeout);

  unlock = false;
  setTimeout(function () {
    unlock = true;
  }, timeout);
}

document.addEventListener("keydown", function (e) {
  if (e.which === 27) {
    const popupActive = document.querySelector(".popup.open");
    popupClose(popupActive);
  }
});

// Mobile menu && burger
const header = document.querySelector(".header");
const headerBurger = header.querySelector(".main-header__burger");
const headerMenu = header.querySelector(".menu-header");

headerBurger.addEventListener("click", () => {
  headerBurger.classList.toggle("main-header__burger_active");
  headerMenu.classList.toggle("menu-header_active");
});

window.addEventListener("scroll", () => {
  if (window.scrollY > header.clientHeight) {
    header.classList.add("header_fixed");
  } else {
    header.classList.remove("header_fixed");
  }
});

// Sliders
if (document.querySelector(".intro")) {
  new Swiper(".intro__slider", {
    loop: true,
    speed: 700,
    slidesPerView: 1,
    preloadImages: false,
    lazy: {
      loadPrevNext: false,
    },
    effect: "fade",
    fadeEffect: {
      crossFade: true,
    },
    pagination: {
      el: ".intro__pagination",
      type: "bullets",
      clickable: true,
    },
  });
}

if (document.querySelector(".clients")) {
  new Swiper(".clients__slider", {
    slidesPerView: "auto",
    spaceBetween: 30,
    freeMode: true,
    loop: false,
    speed: 700,
    grabCursor: true,
    scrollbar: {
      el: ".clients__scroll",
      draggable: true,
    },
  });
}

if (document.querySelector(".portfolio")) {
  new Swiper(".portfolio__slider", {
    slidesPerView: "auto",
    spaceBetween: 24,
    freeMode: true,
    loop: false,
    speed: 700,
    grabCursor: true,
    scrollbar: {
      el: ".portfolio__scroll",
      draggable: true,
    },
  });
}

const securityOuters = document.querySelectorAll(".item-main-security__outer");
if (securityOuters.length) {
  for (let i = 0; i < securityOuters.length; i++) {
    const securityOuter = securityOuters[i];
    const securitySlider = securityOuter.querySelector(
      ".item-main-security__slider"
    );

    const outerClass = `item-main-security__outer_${i}`;
    const sliderClass = `item-main-security__slider_${i}`;

    securityOuter.classList.add(outerClass);
    securitySlider.classList.add(sliderClass);

    new Swiper("." + sliderClass, {
      slidesPerView: 1,
      loop: true,
      autoHeight: true,
      speed: 550,
      effect: "fade",
      fadeEffect: {
        crossFade: true,
      },
      navigation: {
        nextEl: `.${outerClass} .item-main-security__next`,
        prevEl: `.${outerClass} .item-main-security__prev`,
      },
      pagination: {
        el: `.${outerClass} .item-main-security__pagination`,
        type: "bullets",
        clickable: true,
      },
    });
  }
}

// Document click
document.addEventListener("click", clickHandler);

const sidebar = document.querySelector(".sidebar");

function clickHandler(e) {
  const target = e.target;

  if (target.closest(".sidebar__displayed")) {
    sidebar.classList.contains("sidebar_active")
      ? sidebar.classList.remove("sidebar_active")
      : sidebar.classList.add("sidebar_active");
  } else if (!target.closest(".sidebar")) {
    sidebar.classList.remove("sidebar_active");
  }
}

// Lazyloading
window.onload = () => {
  const lazyImages = document.querySelectorAll("img[data-src]");

  if (lazyImages) {
    const imageObserver = new IntersectionObserver(
      (entries, imgObserver) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const lazyImage = entry.target;
            lazyImage.src = lazyImage.dataset.src;

            lazyImage.addEventListener("load", () => {
              lazyImage.classList.add("lazy-image-loaded");
            });

            imgObserver.unobserve(lazyImage);
          }
        });
      },
      {
        root: null,
        threshold: 0.7,
      }
    );

    lazyImages.forEach((image) => imageObserver.observe(image));
  }
};
